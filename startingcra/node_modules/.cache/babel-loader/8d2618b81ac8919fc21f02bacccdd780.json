{"ast":null,"code":"var _jsxFileName = \"C:\\\\cralifepro\\\\startingcra\\\\src\\\\components\\\\UpComingExpense\\\\UpcomingDataForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./styles/UpcomingDataForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UpcomingDataForm = props => {\n  _s();\n\n  //Zone to create methods for every event_listener\n  //A-use state for saving all the target-values\n  //option1: save data changed\n  //   const [inputTitle, setInputTitle] = useState(\"\");\n  //   const [inputAmount, setInputAmount] = useState(\"\");\n  //   const [inputDate, setInputDate] = useState(\"\");\n  //Alternative approach use one useState - What's better?\n  //option2:save data changed\n  const [userInputs, setUserInputs] = useState({\n    inputTitle: \"\",\n    inputAmount: \"\",\n    inputDate: \"\"\n  }); //B-Create methods to handle input event\n  //option1:\n  // const titleChangeHandler = (event) => {\n  //console.log('titletHandler')\n  // console.log(\n  //   \"test Handler Title about to change or parameter event-target-value\");\n  //  return (\n  // console.log(\"test Title about to change or parameter event-see target-value:?\" )\n  // console.log(event.target.value)\n  //  setInputTitle(event.target.value)\n  // );\n  // };\n  //option2:\n\n  const titleChangeHandler = event => {\n    setUserInputs({ ...userInputs,\n      inputTitle: event.target.value\n    });\n  };\n\n  const amountChangeHandler = event => {//console.log('amountHandler')\n    //return setInputAmount(event.target.value);\n  };\n\n  const dateChangeHandler = event => {\n    //console.log('dateHandler')\n    // return setInputDate(event.target.value);\n    return 0;\n  }; //make sure saving all target-values using imported {useState}\n  //call the function and set it for each event listener input\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \" Title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \" Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          onChange: amountChangeHandler,\n          min: \"0.01\",\n          step: \"0.01\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \" Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          onChange: dateChangeHandler,\n          min: \"2021-01-01\",\n          max: \"2022-12-31\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \" Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UpcomingDataForm, \"VmaBdxnu4w62M0gIHoNM/KU45L8=\");\n\n_c = UpcomingDataForm;\nexport default UpcomingDataForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpcomingDataForm\");","map":{"version":3,"sources":["C:/cralifepro/startingcra/src/components/UpComingExpense/UpcomingDataForm.js"],"names":["React","useState","UpcomingDataForm","props","userInputs","setUserInputs","inputTitle","inputAmount","inputDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,+BAAP;;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAAA;;AAClC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC;AAC3CK,IAAAA,UAAU,EAAE,EAD+B;AAE3CC,IAAAA,WAAW,EAAE,EAF8B;AAG3CC,IAAAA,SAAS,EAAE;AAHgC,GAAD,CAA5C,CAVkC,CAgBlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMC,kBAAkB,GAAIC,KAAD,IAAW;AACpCL,IAAAA,aAAa,CAAC,EACZ,GAAGD,UADS;AAEZE,MAAAA,UAAU,EAAEI,KAAK,CAACC,MAAN,CAAaC;AAFb,KAAD,CAAb;AAID,GALD;;AAMA,QAAMC,mBAAmB,GAAIH,KAAD,IAAW,CACrC;AACA;AACD,GAHD;;AAKA,QAAMI,iBAAiB,GAAIJ,KAAD,IAAW;AACnC;AACD;AACA,WAAO,CAAP;AACA,GAJD,CAxCkC,CA6ClC;AACA;;;AACA,sBACE;AAAA,4BAEE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,QAAQ,EAAED;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,QAAQ,EAAEI,mBAFZ;AAGE,UAAA,GAAG,EAAC,MAHN;AAIE,UAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAcE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,QAAQ,EAAEC,iBAFZ;AAGE,UAAA,GAAG,EAAC,YAHN;AAIE,UAAA,GAAG,EAAC;AAJN;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eA0BE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,6BACE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA1BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD,CA/ED;;GAAMZ,gB;;KAAAA,gB;AAiFN,eAAeA,gBAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport \"./styles/UpcomingDataForm.css\";\r\n\r\nconst UpcomingDataForm = (props) => {\r\n  //Zone to create methods for every event_listener\r\n  //A-use state for saving all the target-values\r\n  //option1: save data changed\r\n  //   const [inputTitle, setInputTitle] = useState(\"\");\r\n  //   const [inputAmount, setInputAmount] = useState(\"\");\r\n  //   const [inputDate, setInputDate] = useState(\"\");\r\n\r\n  //Alternative approach use one useState - What's better?\r\n  //option2:save data changed\r\n  const [userInputs, setUserInputs] = useState({\r\n    inputTitle: \"\",\r\n    inputAmount: \"\",\r\n    inputDate: \"\",\r\n  });\r\n\r\n  //B-Create methods to handle input event\r\n  //option1:\r\n  // const titleChangeHandler = (event) => {\r\n  //console.log('titletHandler')\r\n  // console.log(\r\n  //   \"test Handler Title about to change or parameter event-target-value\");\r\n  //  return (\r\n  // console.log(\"test Title about to change or parameter event-see target-value:?\" )\r\n  // console.log(event.target.value)\r\n  //  setInputTitle(event.target.value)\r\n  // );\r\n  // };\r\n  //option2:\r\n  const titleChangeHandler = (event) => {\r\n    setUserInputs({\r\n      ...userInputs,\r\n      inputTitle: event.target.value,\r\n    });\r\n  };\r\n  const amountChangeHandler = (event) => {\r\n    //console.log('amountHandler')\r\n    //return setInputAmount(event.target.value);\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n    //console.log('dateHandler')\r\n   // return setInputDate(event.target.value);\r\n   return 0;\r\n  };\r\n  //make sure saving all target-values using imported {useState}\r\n  //call the function and set it for each event listener input\r\n  return (\r\n    <form>\r\n      {/* add event_listener to attribute for every key stroke show up with label */}\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label> Title:</label>\r\n          <input type=\"text\" onChange={titleChangeHandler} />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label> Amount:</label>\r\n          <input\r\n            type=\"number\"\r\n            onChange={amountChangeHandler}\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label> Date:</label>\r\n          <input\r\n            type=\"date\"\r\n            onChange={dateChangeHandler}\r\n            min=\"2021-01-01\"\r\n            max=\"2022-12-31\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"submit\"> Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UpcomingDataForm;\r\n"]},"metadata":{},"sourceType":"module"}